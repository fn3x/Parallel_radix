Scheme RadixSort
{
  P = [1];
  N = [2];
  Max = 100;

	ArrayFromFile = (("./" * N.toString * ".txt").add * N.EmptyArray).openFile.([:] -> [1], print);	
    EmptyArray = ([1] * 0).arrayCreate;

  RandomArray = (N * Max).RandomIntArray;

  arrayAndMax = ArrayFromFile.getArrayAndMax;

  Fun RandomIntArray{
    Size = [1];
    Max = [2];

    EmptyArray = (1 * 0).arrayCreate;

    @ = (EmptyArray * Size * Max * 0).createRandomArray;

    Fun createRandomArray{
      Array = [1];
      Size = [2];
      Max = [3];
      i = [4];

      RandomNumber = Max.RandomInt;
      RandomNumberArray = (1 * RandomNumber).arrayCreate;

      @ = (i * 0).equal -> (RandomNumberArray * Size * Max * (i * 1).add).createRandomArray,
          (i * Size).less -> ((Array * RandomNumberArray).arrayCat * Size * Max * (i * 1).add).createRandomArray,
          (i * Size).equal -> Array;

      Fun RandomInt{
        Max = [1];
        @ = (rand * Max.toReal).mul.toInt;
      }
    }
  }

  Fun getArrayAndMax {
    Array = [1];

    @ = Array * (Array * 0 * 0).findMax;
  }

  Fun findMax{
    array = [1];
    max = [2];
    currIndex = [3];

    @ = (array.arrayLen  * 0).equal -> -1,
        ((array.arrayLen  * 1).sub * currIndex).equal -> ((array * currIndex).arrayGet * max).getMaxOf.toInt,
        (array.arrayLen  * 1).greater -> (array * ((array * currIndex).arrayGet * max).getMaxOf * (currIndex * 1).add).findMax;

    Fun getMaxOf{
      @ = ([1] * [2]).greater -> [1], [2];
    }
  }

  @ = (arrayAndMax * P).CombineSorts;

  Fun CombineSorts{
    Array = [1];
    max = [2];
    P = [3];

    depth = 0;
    startIndex = 0;
    middleIndex = (Array.arrayLen * 2).div;
    endIndex = (Array.arrayLen * 1).sub;

    @ = (Array * max * depth * startIndex * middleIndex * endIndex * P).splitRecursion;

    Fun splitRecursion {
      Array = [1];
      max = [2];
      depth = [3];
      startIndex = [4];
      middleIndex = [5];
      endIndex = [6];
      P = [7];

      leftStartIndex = startIndex;
      leftMiddleIndex = ((startIndex * middleIndex).add * 2).div;
      leftEndIndex = middleIndex;

      leftIndices = leftStartIndex * leftMiddleIndex * leftEndIndex;

      rightStartIndex = middleIndex;
      rightMiddleIndex = ((middleIndex * endIndex).add * 2).div;
      rightEndIndex = endIndex;

      rightIndices = rightStartIndex * rightMiddleIndex * rightEndIndex;

      @ = (depth * ((P * 2).div * 1).sub).equal -> (Array * max * leftStartIndex * leftEndIndex).SortDigits * (Array * max * rightStartIndex * rightEndIndex).SortDigits,
          (Array * max * (depth * 1).add * leftIndices * P).splitRecursion * (Array * max * (depth * 1).add * rightIndices * P).splitRecursion;

      Fun SortDigits{
        Array = [1];
        MaxNum = [2];
        StartIndex = [3];
        EndIndex = [4];

        @ = (Array * StartIndex * 1 * MaxNum * StartIndex * EndIndex).Sort;

        Fun Sort{
          Array = [1];
          posValue = [2];
          Rank = [3];
          MaxNum = [4];
          startIndex = [5];
          endIndex = [6];

          @ = ((MaxNum * Rank).div * 0).greater -> ((Array * posValue * Rank * 0 * startIndex * endIndex).ReorderBuckets * (Rank * 10).mul * MaxNum * startIndex * endIndex).Sort, Array;

          Fun ReorderBuckets{
            Array = [1];
            posValue = [2];
            Rank = [3];
            i = [4];
            startIndex = [5];
            endIndex = [6];

            @ = (i * 10).less -> ((Array * posValue * Rank * i * startIndex * endIndex).ReorderByDigit * Rank * (i * 1).add * startIndex * endIndex).ReorderBuckets,
                (i * 10).equal -> (Array * startIndex);

            Fun ReorderByDigit{
              Array = [1];
              posValue = [2];
              Rank = [3];
              i = [4];
              j = [5];
              endIndex = [6];

              CurrentNumber = (Array * j).arrayGet;
              SwappedArray = (Array * posValue * j).Swap;
              IncPosArray = (SwappedArray * (posValue * 1).add);

              @ = (j * endIndex).greater -> (Array * posValue),
                  ((j * endIndex).lequal * ((CurrentNumber * Rank * 1).getDigit * i).equal).and -> (IncPosArray * Rank * i * (j * 1).add * endIndex).ReorderByDigit,
                  ((j * endIndex).lequal * ((CurrentNumber * Rank * 1).getDigit * i).nequal).and -> (Array * posValue * Rank * i * (j * 1).add * endIndex).ReorderByDigit;

              Fun Swap{
                Array = [1];
                i = [2];
                j = [3];

                @ = (Array * i * j * (Array * i).arrayGet * (Array * j).arrayGet).TempSwap;

                Fun TempSwap{
                  Array = [1];
                  i = [2];
                  j = [3];
                  first = [4];
                  second = [5];
                  
                  @ = ((Array * i * second).arraySet * j * first).arraySet;
                }
              }
              Fun getDigit{
                Number = [1];
                Rank = [2];
                Counter = [3];
                
                @ = ((Number * 0).greater * (Rank * Counter).nequal).and -> ((Number * 10).div * Rank * (Counter * 10).mul).getDigit,
                    (Number * 10).mod;
              }
            }
          }
        }
      }
    }
  }
}
Application
%RadixSort(2, 5000)